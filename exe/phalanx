#!/usr/bin/env ruby
# frozen_string_literal: true

require 'phalanx'

require 'sorted_set'
require 'amazing_print'

CLUB = '♣'
DIAMOND = '♦'
HEART = '♥'
SPADE = '♠'

SUITES = [CLUB, DIAMOND, HEART, SPADE].freeze

class Card
  include Comparable

  attr_reader :suite, :value

  def initialize(suite, value)
    @suite = suite
    @value = value
  end

  def to_s
    [suite, value].join
  end

  def to_a
    [value, suite]
  end

  def <=>(other)
    to_a <=> other.to_a
  end
end

VALUES = (2..9)

module Game
  def self.make_player
    deck = SUITES.flat_map { |suite| VALUES.map { |value| Card.new(suite, value) } }
    deck.shuffle!

    hand = deck.shift(12)
    hand.sort!.reverse!

    rows = { front: hand.shift(4), back: hand.shift(4) }

    { hand:, rows:, deck:, discard: [], damage: [] }
  end
end

player_a = Game.make_player
ap player_a

player_b = Game.make_player
ap player_b
